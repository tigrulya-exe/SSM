/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.smartdata.server.generated.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import javax.annotation.Generated;
import javax.validation.Valid;
import org.smartdata.server.generated.model.CmdletDto;
import org.smartdata.server.generated.model.CmdletStateDto;
import org.smartdata.server.generated.model.CmdletsDto;
import org.smartdata.server.generated.model.ErrorResponseDto;
import org.smartdata.server.generated.model.PageRequestDto;
import org.smartdata.server.generated.model.SubmitCmdletRequestDto;
import org.smartdata.server.generated.model.TimeIntervalDto;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Cmdlets", description = "the Cmdlets API")
public interface CmdletsApi {

    default CmdletsApiDelegate getDelegate() {
        return new CmdletsApiDelegate() {};
    }

    /**
     * POST /api/v2/cmdlets : Submit cmdlet
     *
     * @param submitCmdletRequestDto  (required)
     * @return OK (status code 200)
     *         or Data is filled incorrectly (status code 400)
     */
    @Operation(
        operationId = "addCmdlet",
        summary = "Submit cmdlet",
        tags = { "Cmdlets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CmdletDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Data is filled incorrectly", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v2/cmdlets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default CmdletDto addCmdlet(
        @Parameter(name = "SubmitCmdletRequestDto", description = "", required = true) @Valid @RequestBody SubmitCmdletRequestDto submitCmdletRequestDto
    ) throws Exception {
        return getDelegate().addCmdlet(submitCmdletRequestDto);
    }


    /**
     * DELETE /api/v2/cmdlets/{id} : Delete cmdlet by id
     *
     * @param id Id of the resource (required)
     * @return Cmdlet has been removed (status code 200)
     *         or Cmdlet with specified id not found (status code 404)
     */
    @Operation(
        operationId = "deleteCmdlet",
        summary = "Delete cmdlet by id",
        tags = { "Cmdlets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cmdlet has been removed"),
            @ApiResponse(responseCode = "404", description = "Cmdlet with specified id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v2/cmdlets/{id}"
    )
    @ResponseStatus(HttpStatus.OK)
    
    default void deleteCmdlet(
        @Parameter(name = "id", description = "Id of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getDelegate().deleteCmdlet(id);
    }


    /**
     * GET /api/v2/cmdlets : List all cmdlets
     *
     * @param pageRequest  (optional)
     * @param textRepresentationLike The object&#39;s text representation filter (optional)
     * @param submissionTime Time interval in which the entity was submitted (optional)
     * @param ruleIds Ids of the rules that cmdlets belong to (optional)
     * @param states List of cmdlet states (optional)
     * @param stateChangedTime Time interval in which the state of the cmdlet was changed (optional)
     * @return OK (status code 200)
     *         or Data is filled incorrectly (status code 400)
     */
    @Operation(
        operationId = "getCmdlets",
        summary = "List all cmdlets",
        tags = { "Cmdlets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CmdletsDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Data is filled incorrectly", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/cmdlets",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default CmdletsDto getCmdlets(
        @Parameter(name = "pageRequest", description = "", in = ParameterIn.QUERY) @Valid PageRequestDto pageRequest,
        @Parameter(name = "textRepresentationLike", description = "The object's text representation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "textRepresentationLike", required = false) String textRepresentationLike,
        @Parameter(name = "submissionTime", description = "Time interval in which the entity was submitted", in = ParameterIn.QUERY) @Valid TimeIntervalDto submissionTime,
        @Parameter(name = "ruleIds", description = "Ids of the rules that cmdlets belong to", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ruleIds", required = false) List<Long> ruleIds,
        @Parameter(name = "states", description = "List of cmdlet states", in = ParameterIn.QUERY) @Valid @RequestParam(value = "states", required = false) List<@Valid CmdletStateDto> states,
        @Parameter(name = "stateChangedTime", description = "Time interval in which the state of the cmdlet was changed", in = ParameterIn.QUERY) @Valid TimeIntervalDto stateChangedTime
    ) throws Exception {
        return getDelegate().getCmdlets(pageRequest, textRepresentationLike, submissionTime, ruleIds, states, stateChangedTime);
    }


    /**
     * POST /api/v2/cmdlets/{id}/stop : Stop specified cmdlet
     *
     * @param id Id of the resource (required)
     * @return Cmdlet has been stopped (status code 200)
     *         or Cmdlet with specified id not found (status code 404)
     */
    @Operation(
        operationId = "stopCmdlet",
        summary = "Stop specified cmdlet",
        tags = { "Cmdlets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cmdlet has been stopped"),
            @ApiResponse(responseCode = "404", description = "Cmdlet with specified id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v2/cmdlets/{id}/stop"
    )
    @ResponseStatus(HttpStatus.OK)
    
    default void stopCmdlet(
        @Parameter(name = "id", description = "Id of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getDelegate().stopCmdlet(id);
    }


    /**
     * GET /api/v2/cmdlets/{id} : Get cmdlet by id
     *
     * @param id Id of the resource (required)
     * @return OK (status code 200)
     *         or Cmdlet with specified id not found (status code 404)
     */
    @Operation(
        operationId = "submitCmdlet",
        summary = "Get cmdlet by id",
        tags = { "Cmdlets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CmdletDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cmdlet with specified id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/cmdlets/{id}",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default CmdletDto submitCmdlet(
        @Parameter(name = "id", description = "Id of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        return getDelegate().submitCmdlet(id);
    }

}
